// Code generated by 'go generate'; DO NOT EDIT.

package json

import (
	"github.com/gad-lang/gad"
)

// funcPb2b_numberAsDecimal_b_floatAsDecimal_b_intAsDecimal_RO is a generated function to make gad.CallableFunc.
// Source: func(b []byte,numberAsDecimal=bool,floatAsDecimal=bool,intAsDecimal=bool) (ret gad.Object)
func funcPb2b_numberAsDecimal_b_floatAsDecimal_b_intAsDecimal_RO(fn func([]byte, bool, bool, bool) gad.Object) gad.CallableFunc {
	return func(c gad.Call) (ret gad.Object, err error) {
		if err := c.Args.CheckLen(1); err != nil {
			return gad.Nil, err
		}

		var (
			numberAsDecimal  bool
			numberAsDecimal_ = &gad.NamedArgVar{
				Name: "numberAsDecimal",
				TypeAssertion: gad.NewTypeAssertion(gad.TypeAssertionHandlers{
					"bool": func(v gad.Object) (ok bool) {
						numberAsDecimal, ok = gad.ToGoBool(v)
						return
					},
				}),
			}
			floatAsDecimal  bool
			floatAsDecimal_ = &gad.NamedArgVar{
				Name: "floatAsDecimal",
				TypeAssertion: gad.NewTypeAssertion(gad.TypeAssertionHandlers{
					"bool": func(v gad.Object) (ok bool) {
						floatAsDecimal, ok = gad.ToGoBool(v)
						return
					},
				}),
			}
			intAsDecimal  bool
			intAsDecimal_ = &gad.NamedArgVar{
				Name: "intAsDecimal",
				TypeAssertion: gad.NewTypeAssertion(gad.TypeAssertionHandlers{
					"bool": func(v gad.Object) (ok bool) {
						intAsDecimal, ok = gad.ToGoBool(v)
						return
					},
				}),
			}
		)
		if err := c.NamedArgs.Get(numberAsDecimal_, floatAsDecimal_, intAsDecimal_); err != nil {
			return gad.Nil, err
		}

		b, ok := gad.ToGoByteSlice(c.Args.Get(0))
		if !ok {
			return gad.Nil, gad.NewArgumentTypeError("1st", "bytes", c.Args.Get(0).Type().Name())
		}

		ret = fn(b, numberAsDecimal, floatAsDecimal, intAsDecimal)
		return
	}
}
