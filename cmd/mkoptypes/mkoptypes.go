package main

import (
	"os"
	"os/exec"
	"strings"
)

const (
	startName = "BinaryOperatorBegin_"
	endName   = "BinaryOperatorEnd_"
)

func main() {
	data, err := os.ReadFile("token/token.go")
	if err != nil {
		panic(err)
	}

	var (
		dataS = string(data)
		start = strings.Index(dataS, startName)
	)
	if start < 0 {
		panic(startName + " not found.")
	}

	start += len(startName)
	dataS = dataS[start:]

	end := strings.Index(dataS, endName)
	if end < 0 {
		panic(endName + " not found.")
	}

	type op struct {
		name, doc string
	}

	var operators []op
	for _, line := range strings.Split(strings.TrimSpace(dataS[:end]), "\n") {
		var (
			parts = strings.Split(line, "//")
			op_   = op{name: strings.TrimSpace(parts[0])}
		)
		if len(parts) > 1 {
			op_.doc = strings.TrimSpace(parts[1])
		}
		operators = append(operators, op_)
	}

	outName := "builtin_operators.go"
	f, err := os.Create(outName)
	if err != nil {
		panic(err)
	}
	defer f.Close()

	f.WriteString("// Code generated by 'go generate'; DO NOT EDIT.\n")
	f.WriteString("package gad\n")
	f.WriteString("import \"github.com/gad-lang/gad/token\"\n")
	f.WriteString("var (\n")
	for _, o := range operators {
		f.WriteString("TBinOp" + o.name + " = &BinaryOperatorType{OpName: \"" + o.name + "\", Token: token." + o.name + "} " + "// " + o.doc + "\n")
	}
	f.WriteString(")\n")
	f.WriteString("func init () {\n")

	f.WriteString("var add = func(typ BuiltinType, t *BinaryOperatorType) {\n" +
		"BuiltinObjects[typ] = t\n" +
		"BuiltinsMap[t.Name()] = typ\n" +
		"BinaryOperatorTypes[t.Token] = t" +
		"}\n")
	for _, o := range operators {
		f.WriteString("add(BuiltinBinOp" + o.name + ", TBinOp" + o.name + ")\n")
	}
	f.WriteString("}\n")

	err = exec.Command("go", "fmt", outName).Run()
	if err != nil {
		panic(err)
	}
}
