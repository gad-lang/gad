// Code generated by 'go generate'; DO NOT EDIT.
package gad

import "github.com/gad-lang/gad/token"

var (
	TBinOpAdd         = &BinaryOperatorType{OpName: "Add", Token: token.Add}                 // +
	TBinOpSub         = &BinaryOperatorType{OpName: "Sub", Token: token.Sub}                 // -
	TBinOpMul         = &BinaryOperatorType{OpName: "Mul", Token: token.Mul}                 // *
	TBinOpQuo         = &BinaryOperatorType{OpName: "Quo", Token: token.Quo}                 // /
	TBinOpRem         = &BinaryOperatorType{OpName: "Rem", Token: token.Rem}                 // %
	TBinOpAnd         = &BinaryOperatorType{OpName: "And", Token: token.And}                 // &
	TBinOpOr          = &BinaryOperatorType{OpName: "Or", Token: token.Or}                   // |
	TBinOpXor         = &BinaryOperatorType{OpName: "Xor", Token: token.Xor}                 // ^
	TBinOpShl         = &BinaryOperatorType{OpName: "Shl", Token: token.Shl}                 // <<
	TBinOpShr         = &BinaryOperatorType{OpName: "Shr", Token: token.Shr}                 // >>
	TBinOpAndNot      = &BinaryOperatorType{OpName: "AndNot", Token: token.AndNot}           // &^
	TBinOpLAnd        = &BinaryOperatorType{OpName: "LAnd", Token: token.LAnd}               // &&
	TBinOpEqual       = &BinaryOperatorType{OpName: "Equal", Token: token.Equal}             // ==
	TBinOpNotEqual    = &BinaryOperatorType{OpName: "NotEqual", Token: token.NotEqual}       // !=
	TBinOpLess        = &BinaryOperatorType{OpName: "Less", Token: token.Less}               // <
	TBinOpGreater     = &BinaryOperatorType{OpName: "Greater", Token: token.Greater}         // >
	TBinOpLessEq      = &BinaryOperatorType{OpName: "LessEq", Token: token.LessEq}           // <=
	TBinOpGreaterEq   = &BinaryOperatorType{OpName: "GreaterEq", Token: token.GreaterEq}     // >=
	TBinOpTilde       = &BinaryOperatorType{OpName: "Tilde", Token: token.Tilde}             // ~
	TBinOpDoubleTilde = &BinaryOperatorType{OpName: "DoubleTilde", Token: token.DoubleTilde} // ~~
	TBinOpTripleTilde = &BinaryOperatorType{OpName: "TripleTilde", Token: token.TripleTilde} // ~~~
)

func init() {
	var add = func(typ BuiltinType, t *BinaryOperatorType) {
		BuiltinObjects[typ] = t
		BuiltinsMap[t.Name()] = typ
		BinaryOperatorTypes[t.Token] = t
	}
	add(BuiltinBinOpAdd, TBinOpAdd)
	add(BuiltinBinOpSub, TBinOpSub)
	add(BuiltinBinOpMul, TBinOpMul)
	add(BuiltinBinOpQuo, TBinOpQuo)
	add(BuiltinBinOpRem, TBinOpRem)
	add(BuiltinBinOpAnd, TBinOpAnd)
	add(BuiltinBinOpOr, TBinOpOr)
	add(BuiltinBinOpXor, TBinOpXor)
	add(BuiltinBinOpShl, TBinOpShl)
	add(BuiltinBinOpShr, TBinOpShr)
	add(BuiltinBinOpAndNot, TBinOpAndNot)
	add(BuiltinBinOpLAnd, TBinOpLAnd)
	add(BuiltinBinOpEqual, TBinOpEqual)
	add(BuiltinBinOpNotEqual, TBinOpNotEqual)
	add(BuiltinBinOpLess, TBinOpLess)
	add(BuiltinBinOpGreater, TBinOpGreater)
	add(BuiltinBinOpLessEq, TBinOpLessEq)
	add(BuiltinBinOpGreaterEq, TBinOpGreaterEq)
	add(BuiltinBinOpTilde, TBinOpTilde)
	add(BuiltinBinOpDoubleTilde, TBinOpDoubleTilde)
	add(BuiltinBinOpTripleTilde, TBinOpTripleTilde)
}
